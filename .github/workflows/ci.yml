name: CI

on:
  push:
    paths:
      - 'context/**'
      - 'env.sh'
      - '.github/workflows/ci.yml'
    branches:
      - '**'
    tags:
      - 'v*.*'

env:
  REGISTRY_IMAGE: ldmx/dark-brem-lib-gen

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      test_tag: ${{ steps.meta.outputs.version || steps.meta.outputs.sha }}
    defaults:
      run:
        shell: bash
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=edge,branch=${{ github.event.repository.default_branch }}
            type=sha,format=short
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - 
        name: Cache Docker Layers on GitHub
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: context
          file: context/Dockerfile
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  test:
    needs: build
    if: ${{ needs.build.outputs.test_tag != '' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        singularity: [noop, 3.8.3, 3.7.1]
    steps:
    - 
      name: Get Env Script
      uses: actions/checkout@v4
    - 
      uses: eWaterCycle/setup-singularity@v7
      if: ${{ !contains(matrix.singularity,'noop') }}
      with:
        singularity-version: ${{ matrix.singularity }}
        use-apptainer: true
    -
      name: Test the Build
      run: |
        _singularity=${{ matrix.singularity }}
        echo "Singularity: ${_singularity}"
        [[ ${_singularity} != "noop" ]] && export DBGEN_FORCE_SINGULARITY="true"
        source env.sh
        dbgen use ${{ needs.build.outputs.test_tag }}
        dbgen config
        dbgen run --nevents 10
